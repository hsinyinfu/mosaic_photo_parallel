cmake_minimum_required(VERSION 2.8)
project( Preprocessing )

find_package( OpenCV REQUIRED )
find_package( Threads REQUIRED )
find_package( OpenMP REQUIRED )

add_executable( DisplayImage DisplayImage.cpp )
add_executable( preprocess_serial preprocess_serial.cpp )
add_executable( preprocess_pthread preprocess_pthread.cpp )
add_executable( preprocess_openmp preprocess_openmp.cpp )

target_link_libraries( DisplayImage ${OpenCV_LIBS} )
target_link_libraries( preprocess_serial ${OpenCV_LIBS} )
target_link_libraries( preprocess_pthread ${OpenCV_LIBS} ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries( preprocess_openmp ${OpenCV_LIBS})

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
     message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()